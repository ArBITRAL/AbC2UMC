Class System is
Signals:
	allowsend(i:int);
	broadcast(tgt,msg,j:int);
Vars:
	RANDOMQUEUE;
	receiving:bool := false;
	target :int[];
	pc :int[];
	bound : obj[];
	-- attributes
	id;
State Top Defers allowsend(i)
Transitions:
	init -> SYS { -/
	for i in 0..pc.length-1 {
		self.allowsend(i);
	}}


 ---------- COMPONENT C0 ------------ 

 
 ----- Send ----- 
SYS.C0.s0 -> C0.s0 {
	allowsend(i)[receiving = false and i = 0 and pc[0][0] = 1]/
	for j in 0..pc.length-1 {
		if (id[j] = 1) then 
			{target[j]:=1;} else {target[j]:=0;}
	};
	receiving=true;
	self.broadcast(target,[3],0);
	pc[0][0] = 2;
}
SYS.C0.s0 -> C0.s0 {
	broadcast(tgt,msg,j)[pc[0][0] = 2]/
	receiving=false;
	self.allowsend(0);
	pc[0][0] = 3;
}
 
 ----- Send ----- 
SYS.C0.s0 -> C0.s0 {
	allowsend(i)[receiving = false and i = 0 and pc[0][1] = 1]/
	for j in 0..pc.length-1 {
		if (id[j] = 2) then 
			{target[j]:=1;} else {target[j]:=0;}
	};
	receiving=true;
	self.broadcast(target,[2],0);
	pc[0][1] = 2;
}
SYS.C0.s0 -> C0.s0 {
	broadcast(tgt,msg,j)[pc[0][1] = 2]/
	receiving=false;
	self.allowsend(0);
	pc[0][1] = 1;
	pc[0][0] = 1;
}
end System;


OO : System (pc => [[1,1]]);
Abstractions {
    Action broadcast($1,$2,$3) -> send($1,$2)
    Action received($1,$2) -> received($1,$2)
}

